{"version":3,"sources":["../../../api/controllers/users.js"],"names":["secret","userIndex","req","res","next","find","lean","exec","err","users","json","register","username","body","password","user","status","send","error","id","login","authenticate","info","token","sign","_id"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;AACA,IAAMA,SAAS,sBAAf;;AAEA;AACO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX;AAAA,SACvB,eAAKC,IAAL,GAAYC,IAAZ,GAAmBC,IAAnB,CAAwB,UAACC,GAAD,EAAMC,KAAN,EAAgB;AACtC,WACEN,IAAIO,IAAJ,CAAS,EAAED,YAAF,EAAT,CADF;AAGD,GAJD,CADuB;AAAA,CAAlB;;AAQA,IAAME,8BAAW,SAAXA,QAAW,CAACT,GAAD,EAAMC,GAAN,EAAWC,IAAX;AAAA,SACtB,eAAKO,QAAL,CAAc,mBAAS,EAAEC,UAAUV,IAAIW,IAAJ,CAASD,QAArB,EAAT,CAAd,EAAyDV,IAAIW,IAAJ,CAASC,QAAlE,EAA4E,UAACN,GAAD,EAAMO,IAAN;AAAA,WAC1EP,MAAML,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,OAAO,sBAAR,EAArB,CAAN,GAA8Df,IAAIa,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACF,MAAKA,KAAKI,EAAX,EAArB,CADY;AAAA,GAA5E,CADsB;AAAA,CAAjB;;AAMA,IAAMC,wBAAQ,SAARA,KAAQ,CAAClB,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACvC,qBAASiB,YAAT,CAAsB,OAAtB,EAA+B,UAACb,GAAD,EAAMO,IAAN,EAAYO,IAAZ,EAAqB;AAClD,QAAId,GAAJ,EAAS;AACP,aAAOJ,KAAKI,GAAL,CAAP;AACD;AACD,QAAI,CAACO,IAAL,EAAW;AACT,aAAOZ,IAAIa,MAAJ,CAAW,GAAX,EAAgBN,IAAhB,CAAqB,EAAEQ,OAAO,qBAAT,EAArB,CAAP;AACD;AACD,QAAIH,IAAJ,EAAU;AACR,UAAMQ,QAAQ,uBAAIC,IAAJ,CAAS,EAAEL,IAAIJ,KAAKU,GAAX,EAAgBb,UAAUG,KAAKH,QAA/B,EAAT,EAAoDZ,MAApD,CAAd;AACA,aAAOG,IACJa,MADI,CACG,GADH,EAEJN,IAFI,CAEC,EAAEa,YAAF,EAFD,CAAP;AAGD;AACF,GAbD,EAaGrB,GAbH,EAaQC,GAbR,EAaaC,IAbb;AAcD,CAfM","file":"users.js","sourcesContent":["import passport from 'passport';\nimport jwt from 'jsonwebtoken';\n\nimport User from '../models/user';\nconst secret = '7x0jhxt&quot;9(thpX6';\n\n// lean gives json instead of mongo docobject\nexport const userIndex = (req, res, next) => (\n  User.find().lean().exec((err, users) => {\n    return (\n      res.json({ users })\n    );\n  })\n);\n\nexport const register = (req, res, next) => (\n  User.register(new User({ username: req.body.username }), req.body.password, (err, user) => (\n    err ? res.status(400).send({error: \"Email address in use\"}) : res.status(200).send({user:user.id})\n  ))\n)\n\nexport const login = (req, res, next) => {\n  passport.authenticate('local', (err, user, info) => {\n    if (err) {\n      return next(err);\n    }\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid credentials' });\n    }\n    if (user) {\n      const token = jwt.sign({ id: user._id, username: user.username }, secret)\n      return res\n        .status(200)\n        .json({ token });\n    }\n  })(req, res, next);\n}\n"]}